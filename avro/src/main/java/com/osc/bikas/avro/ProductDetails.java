/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.osc.bikas.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5881172549386187277L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductDetails\",\"namespace\":\"com.osc.bikas.avro\",\"fields\":[{\"name\":\"productName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"productPrice\",\"type\":\"double\",\",default\":1.0},{\"name\":\"productDescription\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductDetails> ENCODER =
      new BinaryMessageEncoder<ProductDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductDetails> DECODER =
      new BinaryMessageDecoder<ProductDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence productName;
   private double productPrice;
   private java.lang.CharSequence productDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductDetails() {}

  /**
   * All-args constructor.
   * @param productName The new value for productName
   * @param productPrice The new value for productPrice
   * @param productDescription The new value for productDescription
   */
  public ProductDetails(java.lang.CharSequence productName, java.lang.Double productPrice, java.lang.CharSequence productDescription) {
    this.productName = productName;
    this.productPrice = productPrice;
    this.productDescription = productDescription;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productName;
    case 1: return productPrice;
    case 2: return productDescription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productName = (java.lang.CharSequence)value$; break;
    case 1: productPrice = (java.lang.Double)value$; break;
    case 2: productDescription = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'productPrice' field.
   * @return The value of the 'productPrice' field.
   */
  public double getProductPrice() {
    return productPrice;
  }


  /**
   * Sets the value of the 'productPrice' field.
   * @param value the value to set.
   */
  public void setProductPrice(double value) {
    this.productPrice = value;
  }

  /**
   * Gets the value of the 'productDescription' field.
   * @return The value of the 'productDescription' field.
   */
  public java.lang.CharSequence getProductDescription() {
    return productDescription;
  }


  /**
   * Sets the value of the 'productDescription' field.
   * @param value the value to set.
   */
  public void setProductDescription(java.lang.CharSequence value) {
    this.productDescription = value;
  }

  /**
   * Creates a new ProductDetails RecordBuilder.
   * @return A new ProductDetails RecordBuilder
   */
  public static com.osc.bikas.avro.ProductDetails.Builder newBuilder() {
    return new com.osc.bikas.avro.ProductDetails.Builder();
  }

  /**
   * Creates a new ProductDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductDetails RecordBuilder
   */
  public static com.osc.bikas.avro.ProductDetails.Builder newBuilder(com.osc.bikas.avro.ProductDetails.Builder other) {
    if (other == null) {
      return new com.osc.bikas.avro.ProductDetails.Builder();
    } else {
      return new com.osc.bikas.avro.ProductDetails.Builder(other);
    }
  }

  /**
   * Creates a new ProductDetails RecordBuilder by copying an existing ProductDetails instance.
   * @param other The existing instance to copy.
   * @return A new ProductDetails RecordBuilder
   */
  public static com.osc.bikas.avro.ProductDetails.Builder newBuilder(com.osc.bikas.avro.ProductDetails other) {
    if (other == null) {
      return new com.osc.bikas.avro.ProductDetails.Builder();
    } else {
      return new com.osc.bikas.avro.ProductDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductDetails>
    implements org.apache.avro.data.RecordBuilder<ProductDetails> {

    private java.lang.CharSequence productName;
    private double productPrice;
    private java.lang.CharSequence productDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.osc.bikas.avro.ProductDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[1].schema(), other.productPrice);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productDescription)) {
        this.productDescription = data().deepCopy(fields()[2].schema(), other.productDescription);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.osc.bikas.avro.ProductDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[1].schema(), other.productPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productDescription)) {
        this.productDescription = data().deepCopy(fields()[2].schema(), other.productDescription);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.productName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productPrice' field.
      * @return The value.
      */
    public double getProductPrice() {
      return productPrice;
    }


    /**
      * Sets the value of the 'productPrice' field.
      * @param value The value of 'productPrice'.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder setProductPrice(double value) {
      validate(fields()[1], value);
      this.productPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productPrice' field has been set.
      * @return True if the 'productPrice' field has been set, false otherwise.
      */
    public boolean hasProductPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productPrice' field.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder clearProductPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductDescription() {
      return productDescription;
    }


    /**
      * Sets the value of the 'productDescription' field.
      * @param value The value of 'productDescription'.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder setProductDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.productDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productDescription' field has been set.
      * @return True if the 'productDescription' field has been set, false otherwise.
      */
    public boolean hasProductDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productDescription' field.
      * @return This builder.
      */
    public com.osc.bikas.avro.ProductDetails.Builder clearProductDescription() {
      productDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductDetails build() {
      try {
        ProductDetails record = new ProductDetails();
        record.productName = fieldSetFlags()[0] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productPrice = fieldSetFlags()[1] ? this.productPrice : (java.lang.Double) defaultValue(fields()[1]);
        record.productDescription = fieldSetFlags()[2] ? this.productDescription : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductDetails>
    READER$ = (org.apache.avro.io.DatumReader<ProductDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.productName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.productName);
    }

    out.writeDouble(this.productPrice);

    if (this.productDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.productDescription);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.productName = null;
      } else {
        this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
      }

      this.productPrice = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.productDescription = null;
      } else {
        this.productDescription = in.readString(this.productDescription instanceof Utf8 ? (Utf8)this.productDescription : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.productName = null;
          } else {
            this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
          }
          break;

        case 1:
          this.productPrice = in.readDouble();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.productDescription = null;
          } else {
            this.productDescription = in.readString(this.productDescription instanceof Utf8 ? (Utf8)this.productDescription : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










